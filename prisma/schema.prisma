generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  firstName     String? 
  lastName      String?
  address       String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([email])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

/* model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  @@id([userId, credentialID])
} */

model Invoice {
  id                     String        @id @default(uuid())
  invoiceName            String
  total                  Int
  status                 InvoiceStatus
  date                   DateTime
  dueDate                Int
  fromName               String
  fromEmail              String
  fromAddress            String
  clientName             String
  clientEmail            String
  clientAddress          String
  currency               String
  invoiceNumber          Int
  note                   String?
  invoiceItemDescription String
  invoiceItemQuantity    Int
  invoiceItemRate        Int
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  userId                 String?
}

enum InvoiceStatus {
  PAID
  PENDING
}
